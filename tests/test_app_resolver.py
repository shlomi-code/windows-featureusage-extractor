#!/usr/bin/env python3
"""
Unit tests for App resolver module
"""

import unittest
import sys
import os
from unittest.mock import Mock, patch, MagicMock

# Add the modules directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'modules'))

from featureusage.app_resolver import AppResolver


class TestAppResolver(unittest.TestCase):
    """Test cases for AppResolver class"""
    
    def setUp(self):
        """Set up test fixtures"""
        self.resolver = AppResolver()
        # Mock the registry access
        self.resolver.registry = Mock()
    
    def test_resolve_app_id_autogenerated(self):
        """Test resolving AutoGenerated app IDs"""
        test_app_id = "Microsoft.AutoGenerated.{12345678-1234-1234-1234-123456789012}"
        
        # Mock the registry access methods
        self.resolver.registry.open_key.return_value = Mock()
        self.resolver.registry.enum_key.return_value = "test_key"
        self.resolver.registry.read_registry_value.return_value = "Test App Name"
        
        result = self.resolver.resolve_app_id(test_app_id)
        
        # Should return the resolved app name
        self.assertEqual("Test App Name", result)
    
    def test_resolve_app_id_non_autogenerated(self):
        """Test resolving non-AutoGenerated app IDs"""
        test_app_id = "Microsoft.WindowsNotepad_8wekyb3d8bbwe!App"
        
        result = self.resolver.resolve_app_id(test_app_id)
        
        # Should return the original app ID for non-AutoGenerated apps
        self.assertEqual(test_app_id, result)
    
    def test_resolve_app_id_registry_error(self):
        """Test handling of registry access errors"""
        test_app_id = "Microsoft.AutoGenerated.{12345678-1234-1234-1234-123456789012}"
        
        # Mock registry access to raise an exception
        self.resolver.registry.open_key.side_effect = Exception("Registry error")
        
        result = self.resolver.resolve_app_id(test_app_id)
        
        # Should return the original app ID when registry access fails
        self.assertEqual(test_app_id, result)
    
    def test_resolve_app_id_empty_result(self):
        """Test handling of empty registry results"""
        test_app_id = "Microsoft.AutoGenerated.{12345678-1234-1234-1234-123456789012}"
        
        # Mock registry access to return empty result
        self.resolver.registry.open_key.return_value = Mock()
        self.resolver.registry.enum_key.return_value = "test_key"
        self.resolver.registry.read_registry_value.return_value = ""
        
        result = self.resolver.resolve_app_id(test_app_id)
        
        # Should return the original app ID when no result found
        self.assertEqual(test_app_id, result)
    
    def test_resolve_app_id_none_result(self):
        """Test handling of None registry results"""
        test_app_id = "Microsoft.AutoGenerated.{12345678-1234-1234-1234-123456789012}"
        
        # Mock registry access to return None
        self.resolver.registry.open_key.return_value = Mock()
        self.resolver.registry.enum_key.return_value = "test_key"
        self.resolver.registry.read_registry_value.return_value = None
        
        result = self.resolver.resolve_app_id(test_app_id)
        
        # Should return the original app ID when result is None
        self.assertEqual(test_app_id, result)
    
    @patch('featureusage.app_resolver.RegistryAccess')
    def test_get_all_installed_apps(self, mock_registry_class):
        """Test getting all installed apps"""
        # Mock the registry access
        mock_registry = Mock()
        mock_registry_class.return_value = mock_registry
        
        # Mock registry enumeration
        mock_registry.open_key.return_value = Mock()
        mock_registry.enum_key.side_effect = ["app1", "app2", None]  # None to stop enumeration
        mock_registry.read_registry_value.return_value = "Test App"
        
        resolver = AppResolver()
        apps = resolver.get_all_installed_apps()
        
        # Should return a dictionary of apps
        self.assertIsInstance(apps, dict)
        self.assertIn("app1", apps)
        self.assertIn("app2", apps)
        self.assertEqual("Test App", apps["app1"])
        self.assertEqual("Test App", apps["app2"])
    
    def test_resolve_app_id_invalid_format(self):
        """Test handling of invalid app ID formats"""
        invalid_app_ids = [
            "",
            None,
            "InvalidAppId",
            "Microsoft.AutoGenerated.invalid-guid",
        ]
        
        for app_id in invalid_app_ids:
            result = self.resolver.resolve_app_id(app_id)
            # Should return the original app ID for invalid formats
            self.assertEqual(app_id, result)


if __name__ == '__main__':
    unittest.main()


