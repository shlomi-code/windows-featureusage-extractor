"""
Windows App ID Resolver

This module provides functionality to resolve Windows app IDs to readable
application names by querying the Windows registry, similar to Get-StartApps.
"""

import winreg
import os
from typing import Dict, Optional, List
import re
from .registry_access import RegistryAccess

# Initialize defusedxml to prevent XML attacks
try:
    import defusedxml
    defusedxml.defuse_stdlib()  # type: ignore
except ImportError:
    # If defusedxml is not available, we'll use the regular xml.etree but with caution
    pass


class AppResolver:
    """Resolves Windows app IDs to readable application names."""
    
    # Known Microsoft AutoGenerated app IDs mapping
    # These are common AutoGenerated app IDs that correspond to specific Windows applications
    KNOWN_AUTOGENERATED_APPS = {
        "Microsoft.AutoGenerated.{923DD477-5846-686B-A659-0FCCD73851A8}": "Task Manager",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524153}": "Administrative Tools",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524152}": "Fonts",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524151}": "Network Connections",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524150}": "Printers and Faxes",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052414F}": "Control Panel",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052414E}": "Recycle Bin",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052414D}": "My Computer",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052414C}": "My Documents",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052414B}": "My Network Places",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052414A}": "Internet Explorer",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524149}": "Outlook Express",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524148}": "Windows Media Player",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524147}": "Windows Messenger",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524146}": "Windows Update",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524145}": "Windows Security Center",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524144}": "Windows Firewall",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524143}": "Windows Defender",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524142}": "Windows Backup",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524141}": "Windows System Restore",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524140}": "Windows Disk Cleanup",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052413F}": "Windows Disk Defragmenter",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052413E}": "Windows Check Disk",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052413D}": "Windows Memory Diagnostic",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052413C}": "Windows Performance Monitor",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052413B}": "Windows Event Viewer",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C502052413A}": "Windows Services",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524139}": "Windows Registry Editor",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524138}": "Windows Command Prompt",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524137}": "Windows PowerShell",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524136}": "Windows Calculator",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524135}": "Windows Notepad",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524134}": "Windows WordPad",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524133}": "Windows Paint",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524132}": "Windows Explorer",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524131}": "Windows Search",
        "Microsoft.AutoGenerated.{D20EA4E1-3957-11d2-A40B-0C5020524130}": "Windows Help and Support",
    }
    
    def __init__(self):
        """Initialize the app resolver."""
        self.app_cache = {}  # Cache for resolved app names
        self.registry = RegistryAccess()  # Initialize registry access
        self.registry_paths = [
            # Windows Store apps
            r"SOFTWARE\Classes\ActivatableClasses\Package",
            # Installed applications
            r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall",
            r"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall",
            # App Paths
            r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths",
            # File associations
            r"SOFTWARE\Classes",
            # Windows Store apps (alternative path)
            r"SOFTWARE\Classes\Extensions\ContractId\Windows.Launch"
        ]
        
        # Start Menu registry paths (similar to Get-StartApps)
        self.start_menu_paths = [
            # Current user Start Menu
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People"),
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People\PeopleBand"),
            # All users Start Menu
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People\PeopleBand"),
            # Start Menu shortcuts
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FileExts"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FileExts"),
            # App shortcuts
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FeatureUsage\AppSwitched"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FeatureUsage\AppSwitched"),
            # Windows Store apps
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Classes\ActivatableClasses\Package"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Classes\ActivatableClasses\Package"),
            # App shortcuts in Start Menu
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People\PeopleBand\PeopleBand"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People\PeopleBand\PeopleBand"),
            # Shell folders
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders"),
            # User shell folders
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"),
            # AppXManifest locations (where Get-StartApps finds auto-generated apps)
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Classes\ActivatableClasses\Package"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Classes\ActivatableClasses\Package"),
            # App shortcuts and manifests
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FeatureUsage\AppLaunch"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FeatureUsage\AppLaunch"),
            # Windows Store app manifests
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Classes\Extensions\ContractId\Windows.Launch"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Classes\Extensions\ContractId\Windows.Launch"),
            # App shortcuts in Start Menu programs
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FeatureUsage\StartMenu"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FeatureUsage\StartMenu"),
        ]
    
    def resolve_app_id(self, app_id: str) -> Optional[str]:
        """
        Resolve an app ID to a readable application name.
        
        Args:
            app_id: The app ID string
            
        Returns:
            Resolved application name or None if not found
        """
        if not app_id:
            return None
        
        # Check cache first
        if app_id in self.app_cache:
            return self.app_cache[app_id]
        
        # First check if it's a known AutoGenerated app ID
        if app_id in self.KNOWN_AUTOGENERATED_APPS:
            app_name = self.KNOWN_AUTOGENERATED_APPS[app_id]
            self.app_cache[app_id] = app_name
            return app_name
        
        # Try different resolution methods
        app_name = self._resolve_from_start_menu(app_id)
        if app_name:
            self.app_cache[app_id] = app_name
            return app_name
        
        app_name = self._resolve_from_registry(app_id)
        if app_name:
            self.app_cache[app_id] = app_name
            return app_name
        
        # If not found, return None
        return None
    
    def _resolve_from_start_menu(self, app_id: str) -> Optional[str]:
        """
        Resolve app ID from Start Menu registry locations (similar to Get-StartApps).
        
        Args:
            app_id: The app ID to resolve
            
        Returns:
            Application name or None if not found
        """
        # First try to resolve from AppXManifest files (like Get-StartApps)
        app_name = self._resolve_from_appx_manifest(app_id)
        if app_name:
            return app_name
        
        # Then try registry paths
        for hkey, registry_path in self.start_menu_paths:
            try:
                app_name = self._search_start_menu_path(hkey, registry_path, app_id)
                if app_name:
                    return app_name
            except Exception:
                continue
        
        return None
    
    def _resolve_from_appx_manifest(self, app_id: str) -> Optional[str]:
        """
        Resolve app ID from AppXManifest files (similar to Get-StartApps).
        
        Args:
            app_id: The app ID to resolve
            
        Returns:
            Application name or None if not found
        """
        try:
            # Common AppXManifest locations
            manifest_paths = [
                os.path.expandvars(r"%LOCALAPPDATA%\Packages"),
                os.path.expandvars(r"%ProgramFiles%\WindowsApps"),
                os.path.expandvars(r"%ProgramFiles(x86)%\WindowsApps"),
            ]
            
            for base_path in manifest_paths:
                if os.path.exists(base_path):
                    app_name = self._search_appx_manifests(base_path, app_id)
                    if app_name:
                        return app_name
            
        except Exception:
            pass
        
        return None
    
    def _search_appx_manifests(self, base_path: str, app_id: str) -> Optional[str]:
        """
        Search for AppXManifest files in a directory.
        
        Args:
            base_path: Base directory to search
            app_id: App ID to find
            
        Returns:
            Application name or None if not found
        """
        try:
            for root, dirs, files in os.walk(base_path):
                for file in files:
                    if file.lower() == "appxmanifest.xml":
                        manifest_path = os.path.join(root, file)
                        app_name = self._parse_appx_manifest(manifest_path, app_id)
                        if app_name:
                            return app_name
        except Exception:
            pass
        
        return None
    
    def _parse_appx_manifest(self, manifest_path: str, app_id: str) -> Optional[str]:
        """
        Parse an AppXManifest.xml file to extract app information.
        
        Args:
            manifest_path: Path to the AppXManifest.xml file
            app_id: App ID to find
            
        Returns:
            Application name or None if not found
        """
        try:
            import defusedxml.ElementTree as ET
            
            # Check if the manifest is for the app we're looking for
            tree = ET.parse(manifest_path)
            root = tree.getroot()
            
            if root is None:
                return None
            
            # Look for the Package element and check if it matches our app_id
            for package in root.findall(".//{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Package"):
                package_id = package.get("Name")
                if package_id and app_id.lower() in package_id.lower():
                    # Found matching package, extract display name
                    display_name = self._extract_display_name_from_manifest(root)
                    if display_name:
                        return display_name
            
            # Also check for Application elements
            for app in root.findall(".//{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Application"):
                app_id_attr = app.get("Id")
                if app_id_attr and app_id.lower() in app_id_attr.lower():
                    display_name = self._extract_display_name_from_manifest(root)
                    if display_name:
                        return display_name
                        
        except Exception:
            pass
        
        return None
    
    def _extract_display_name_from_manifest(self, root) -> Optional[str]:
        """
        Extract display name from AppXManifest root element.
        
        Args:
            root: Root element of the AppXManifest
            
        Returns:
            Display name or None if not found
        """
        try:
            # Try to find display name in various locations
            display_name_paths = [
                ".//{http://schemas.microsoft.com/appx/manifest/foundation/windows10}DisplayName",
                ".//{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Identity/@Name",
                ".//{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Properties/{http://schemas.microsoft.com/appx/manifest/foundation/windows10}DisplayName",
            ]
            
            for path in display_name_paths:
                element = root.find(path)
                if element is not None:
                    if hasattr(element, 'text') and element.text:
                        return element.text.strip()
                    elif hasattr(element, 'attrib') and element.attrib:
                        # Handle attribute case
                        for key, value in element.attrib.items():
                            if 'name' in key.lower() or 'display' in key.lower():
                                return value.strip()
            
            # Try to get from Identity element
            identity = root.find(".//{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Identity")
            if identity is not None:
                name = identity.get("Name")
                if name:
                    return name.strip()
                    
        except Exception:
            pass
        
        return None
    
    def _search_start_menu_path(self, hkey, registry_path: str, app_id: str) -> Optional[str]:
        """
        Search a specific Start Menu registry path for the app ID.
        
        Args:
            hkey: Registry hive (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE)
            registry_path: Registry path to search
            app_id: App ID to find
            
        Returns:
            Application name or None if not found
        """
        try:
            key = self.registry.open_key(hkey, registry_path)
            if key is None:
                return None
            app_name = self._search_start_menu_key(key, app_id)
            self.registry.close_key(key)
            return app_name
        except Exception:
            return None
    
    def _search_start_menu_key(self, key, app_id: str) -> Optional[str]:
        """
        Search within a Start Menu registry key for the app ID.
        
        Args:
            key: Registry key to search
            app_id: App ID to find
            
        Returns:
            Application name or None if not found
        """
        try:
            i = 0
            while True:
                subkey_name = self.registry.enum_key(key, i)
                if subkey_name is None:
                    break
                i += 1
                
                # Check if this subkey matches the app ID
                if app_id.lower() in subkey_name.lower():
                    try:
                        subkey = self.registry.open_key(winreg.HKEY_CURRENT_USER, subkey_name)
                        if subkey:
                            app_name = self._get_app_name_from_start_menu_subkey(subkey)
                            self.registry.close_key(subkey)
                            if app_name:
                                return app_name
                    except Exception:
                        continue
                
                # Recursively search subkeys
                try:
                    subkey = self.registry.open_key(winreg.HKEY_CURRENT_USER, subkey_name)
                    if subkey:
                        app_name = self._search_start_menu_key(subkey, app_id)
                        self.registry.close_key(subkey)
                        if app_name:
                            return app_name
                except Exception:
                    continue
                    
        except Exception:
            pass
        
        return None
    
    def _get_app_name_from_start_menu_subkey(self, subkey) -> Optional[str]:
        """
        Extract application name from a Start Menu registry subkey.
        
        Args:
            subkey: Registry subkey
            
        Returns:
            Application name or None if not found
        """
        try:
            # Try common display name fields for Start Menu apps
            display_name_fields = [
                "DisplayName",
                "FriendlyName", 
                "AppName",
                "Name",
                "Title",
                "AppUserModelId",
                "ApplicationName",
                "AppDisplayName"
            ]
            
            for field in display_name_fields:
                try:
                    result = self.registry.query_value_ex(subkey, field)
                    if result is not None:
                        value, _ = result
                        if value and isinstance(value, str):
                            return value.strip()
                except Exception:
                    continue
            
            # Try default value
            try:
                result = self.registry.query_value_ex(subkey, None)
                if result is not None:
                    value, _ = result
                    if value and isinstance(value, str):
                        return value.strip()
            except Exception:
                pass
                
        except Exception:
            pass
        
        return None
    
    def _resolve_from_registry(self, app_id: str) -> Optional[str]:
        """
        Resolve app ID from Windows registry.
        
        Args:
            app_id: The app ID to resolve
            
        Returns:
            Application name or None if not found
        """
        # Try different registry paths
        for registry_path in self.registry_paths:
            try:
                app_name = self._search_registry_path(registry_path, app_id)
                if app_name:
                    return app_name
            except Exception:
                continue
        
        return None
    
    def _search_registry_path(self, registry_path: str, app_id: str) -> Optional[str]:
        """
        Search a specific registry path for the app ID.
        
        Args:
            registry_path: Registry path to search
            app_id: App ID to find
            
        Returns:
            Application name or None if not found
        """
        try:
            # Try HKEY_LOCAL_MACHINE first
            key = self.registry.open_key(winreg.HKEY_LOCAL_MACHINE, registry_path)
            if key:
                app_name = self._search_registry_key(key, app_id)
                self.registry.close_key(key)
                if app_name:
                    return app_name
        except Exception:
            pass
        
        try:
            # Try HKEY_CURRENT_USER
            key = self.registry.open_key(winreg.HKEY_CURRENT_USER, registry_path)
            if key:
                app_name = self._search_registry_key(key, app_id)
                self.registry.close_key(key)
                if app_name:
                    return app_name
        except Exception:
            pass
        
        return None
    
    def _search_registry_key(self, key, app_id: str) -> Optional[str]:
        """
        Search within a registry key for the app ID.
        
        Args:
            key: Registry key to search
            app_id: App ID to find
            
        Returns:
            Application name or None if not found
        """
        try:
            i = 0
            while True:
                subkey_name = self.registry.enum_key(key, i)
                if subkey_name is None:
                    break
                i += 1
                
                # Check if this subkey matches the app ID
                if app_id.lower() in subkey_name.lower():
                    try:
                        subkey = self.registry.open_key(winreg.HKEY_CURRENT_USER, subkey_name)
                        if subkey:
                            app_name = self._get_app_name_from_subkey(subkey)
                            self.registry.close_key(subkey)
                            if app_name:
                                return app_name
                    except Exception:
                        continue
                
                # Recursively search subkeys
                try:
                    subkey = self.registry.open_key(winreg.HKEY_CURRENT_USER, subkey_name)
                    if subkey:
                        app_name = self._search_registry_key(subkey, app_id)
                        self.registry.close_key(subkey)
                        if app_name:
                            return app_name
                except Exception:
                    continue
                    
        except Exception:
            pass
        
        return None
    
    def _get_app_name_from_subkey(self, subkey) -> Optional[str]:
        """
        Extract application name from a registry subkey.
        
        Args:
            subkey: Registry subkey
            
        Returns:
            Application name or None if not found
        """
        try:
            # Try common display name fields
            display_name_fields = [
                "DisplayName",
                "FriendlyName", 
                "AppName",
                "Name",
                "Title"
            ]
            
            for field in display_name_fields:
                try:
                    result = self.registry.query_value_ex(subkey, field)
                    if result is not None:
                        value, _ = result
                        if value and isinstance(value, str):
                            return value.strip()
                except Exception:
                    continue
            
            # Try default value
            try:
                result = self.registry.query_value_ex(subkey, None)
                if result is not None:
                    value, _ = result
                    if value and isinstance(value, str):
                        return value.strip()
            except Exception:
                pass
                
        except Exception:
            pass
        
        return None
    
    def resolve_path_with_apps(self, path: str) -> str:
        """
        Resolve app IDs in a path string to readable application names.
        
        Args:
            path: Path string that may contain app IDs
            
        Returns:
            Path string with resolved app IDs
        """
        # Common app ID patterns including auto-generated ones
        app_patterns = [
            # Windows Store app pattern
            r'([A-Za-z0-9]+\.[A-Za-z0-9]+_[A-Za-z0-9]+)',
            # Microsoft app pattern
            r'(Microsoft\.[A-Za-z0-9]+_[A-Za-z0-9]+)',
            # Auto-generated app pattern (like Get-StartApps)
            r'(Microsoft\.AutoGenerated\.[A-Za-z0-9\-]+)',
            # Generic app pattern
            r'([A-Za-z0-9]+\.[A-Za-z0-9]+\.[A-Za-z0-9]+)'
        ]
        
        resolved_path = path
        
        for pattern in app_patterns:
            matches = re.finditer(pattern, path)
            for match in matches:
                app_id = match.group(1)
                app_name = self.resolve_app_id(app_id)
                if app_name:
                    # Replace the app ID with the resolved name
                    resolved_path = resolved_path.replace(app_id, f"{app_id} ({app_name})")
        
        return resolved_path
    
    def get_installed_apps(self) -> Dict[str, str]:
        """
        Get a dictionary of installed apps and their names.
        
        Returns:
            Dictionary mapping app IDs to app names
        """
        apps = {}
        
        # Search in common registry locations
        registry_locations = [
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"),
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall")
        ]
        
        for hkey, path in registry_locations:
            try:
                key = self.registry.open_key(hkey, path)
                if key:
                    self._collect_apps_from_key(key, apps)
                    self.registry.close_key(key)
            except Exception:
                continue
        
        return apps
    
    def _collect_apps_from_key(self, key, apps: Dict[str, str]):
        """
        Collect apps from a registry key.
        
        Args:
            key: Registry key to search
            apps: Dictionary to populate with app information
        """
        try:
            i = 0
            while True:
                subkey_name = self.registry.enum_key(key, i)
                if subkey_name is None:
                    break
                i += 1
                
                try:
                    subkey = self.registry.open_key(winreg.HKEY_CURRENT_USER, subkey_name)
                    if subkey:
                        app_name = self._get_app_name_from_subkey(subkey)
                        self.registry.close_key(subkey)
                        
                        if app_name:
                            apps[subkey_name] = app_name
                except Exception:
                    continue
                    
        except Exception:
            pass 